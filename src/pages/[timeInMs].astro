---
import Layout from '../layouts/Layout.astro';

const { timeInMs } = Astro.params;
const response = await fetch(Astro.url.origin+'/.netlify/functions/get_settings');
const data = await response.json();
const eventData = data.events.filter(event => event.timeInMs == timeInMs);
if (eventData.length === 0) return Astro.redirect("/");
const {apiKey, sessionId, conversationId} = eventData[0];

const tokensResponse = await fetch(Astro.url.origin+'/.netlify/functions/generate_tokens',{
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      // 'Content-Type': 'application/x-www-form-urlencoded',
    },
    body: JSON.stringify({sessionId, role: "subscriber"})
});
const tokensData = await tokensResponse.json();
const { videoToken } = tokensData;

---
<Layout title="Watch">

    <h1><a href="./"> home </a></h1>

    <section data-video-token={videoToken} data-session-id={sessionId} data-api-key={apiKey} data-conversation-id={conversationId}>
        <div id="video-subscriber-container">
            <div id="scene">
                <div>
                    <h1>{eventData[0].title}</h1>
                    <br/><br/><p id="scene-status"></p>    
                </div>
            </div>
            <div id="screen-container"></div>
            <div id="camera-container"></div>
        </div>

        <div id="chat-section">
            <div id="chat-login">
                <label for="name">Enter your name for chat:</label><br/>
                <input type="text" id="name" name="name" required><br/>
                <button id="submit">submit</button>
                <div id="login-status"></div>
            </div>
            <div id="chat-application">
                <div id="chat-section">
                    <vc-messages></vc-messages>
                    <div>
                        <vc-text-input typingTimeout="1500"></vc-text-input>
                        <vc-typing-indicator></vc-typing-indicator>
                    </div>          
                </div>
            </div>      
        </div>
    </section>
</Layout>

<script>
	import '@vonage/video-subscriber/video-subscriber.js';
    import '@vonage/vc-members/vc-members.js';
    import '@vonage/vc-messages/vc-messages.js';
    import '@vonage/vc-typing-indicator/vc-typing-indicator';
    import '@vonage/vc-text-input/vc-text-input.js';


</script>


<script is:inline>
    const sectionEl = document.querySelector("section");
    const videoSubscriberContainer = document.querySelector("#video-subscriber-container");
    const screenContainer = document.querySelector("#screen-container");
    const cameraContainer = document.querySelector("#camera-container");

    const chatApplication = document.querySelector("#chat-application");
    const chatLogin = document.querySelector("#chat-login");

    const nameInput = document.querySelector("#name");
    const submitBtn = document.querySelector("#submit");
    const loginStatus = document.querySelector("#login-status");
    const vonageInput = document.querySelector("vc-text-input");
    const vonageTypingIndicator = document.querySelector("vc-typing-indicator");
    const vonageMembers = document.querySelector("vc-members");
    const vonageMessagesFeed = document.querySelector("vc-messages");

    async function postData(url = "", data = {}) {
        const response = await fetch(url, {
            method: "POST", // *GET, POST, PUT, DELETE, etc.
            headers: {
                "Content-Type": "application/json",
            },
            redirect: "follow", // manual, *follow, error
            referrerPolicy: "no-referrer", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
            body: JSON.stringify(data), // body data type must match "Content-Type" header
        });
        return response.json(); // parses JSON response into native JavaScript objects
    }


    window.addEventListener("load", () => {
        const sessionId = sectionEl.dataset.sessionId;
        const apiKey = sectionEl.dataset.apiKey;
        const conversationId = sectionEl.dataset.conversationId;
        const videoToken = sectionEl.dataset.videoToken;
        // Initialize an OpenTok Session object
        const session = OT.initSession(apiKey, sessionId);

        session.connect(videoToken, function(error) {
            if (error) {
                console.error(error.message);
            } else {
                // You have connected to the session. You could publish a stream now.
                console.log("session connected!")
            }
        });

        session.on("streamCreated", function(event) {
            // check to see if event.stream.videoType is camera or screen
            if (event.stream.videoType === "screen"){
                const videoSubscriberEl = document.createElement("video-subscriber");
                videoSubscriberEl.setAttribute("id", `${event.stream.streamId}`);
                videoSubscriberEl.session = session;
                videoSubscriberEl.stream = event.stream;
                videoSubscriberEl.properties = {width: "100%", height: "100%", showControls: false}
                screenContainer.appendChild(videoSubscriberEl);
            } else {
                const videoSubscriberEl = document.createElement("video-subscriber");
                videoSubscriberEl.setAttribute("id", `${event.stream.streamId}`);
                videoSubscriberEl.session = session;
                videoSubscriberEl.stream = event.stream;
                videoSubscriberEl.properties = {width: "100%", height: "100%"}
                videoSubscriberEl.style.display = "none";

                cameraContainer.appendChild(videoSubscriberEl);
                const selectedSubscriber = document.querySelector(`[id="${event.stream.streamId}"]`);
                selectedSubscriber.addEventListener('subscribed', (event) => {
                    event.detail.subscriber.subscribeToAudio(false);
                })
            }
        });

        function updateDisplay (signal) {
            const display = signal.display.toLowerCase() === "true" ? true : false;
            const selectedSubscriber = document.querySelector(`[id="${signal.id}"]`);
            if (selectedSubscriber){
                selectedSubscriber.subscribeToAudio(display);
                selectedSubscriber.style.display = display ? "block" : "none";
            }
        }

        session.on('signal:toggle-display', (event) => {
            const signal = JSON.parse(event.data);
            updateDisplay(signal);
        });
        session.on('signal:update-displays', (event) => {
            const signalArray = JSON.parse(event.data);
            signalArray.forEach(signal => updateDisplay(signal));
        });
        session.on('signal:update-scene', (event) => {
            const sceneEl = document.querySelector("#scene");
            const sceneStatus = document.querySelector("#scene-status");
            if (event.data === ""){
                sceneEl.style.display = "none";
            } else {
                sceneStatus.textContent = event.data;
                sceneEl.style.display = "flex";
            }
        });

        submitBtn.addEventListener("click", async ()=> {
            if (nameInput.value.replaceAll(' ', '') !== ''){
                loginStatus.textContent = "logging in...";
                // Log into chat
                const chatData = await postData(`/.netlify/functions/join_chat`, {name: nameInput.value, conversationId});
                const { chatToken } = chatData;

                client = new NexmoClient({debug:false});
                app = await client.createSession(chatToken);
                conversation = await app.getConversation(conversationId);

                vonageInput.conversation = conversation;
                vonageTypingIndicator.conversation = conversation;
                // vonageMembers.conversation = conversation;
                vonageMessagesFeed.conversation = conversation;

                chatLogin.style.display = "none";
                chatApplication.style.display = "flex";

                // allows enter button to send chat messages
                const vonageInputEl = vonageInput.shadowRoot.querySelector("#text");
                vonageInputEl.addEventListener('keydown', (e) => {
                    if (e.code === "Enter"){
                        vonageInput.__handleClickEvent();
                    }
                });

            }
        });

    });



</script>

<style>
    section {
        display: flex;
    }
    video-subscribers {
        display: none;
    }

    #scene {
        display: none;
        /* display: flex; */
        width: 100%;
        height: 100%;
        align-items: center;
        justify-content: center;
        position: absolute;
        background-color: white;
        z-index: 20;
        text-align: center;
    }

    #chat-application {
        display: none;
        align-items: flex-start;
        justify-content: space-between;
        width: 100%;
    }


    vc-messages {
        height: 300px;
    }

    vc-members {
        height: 300px;
        width: 100%;
        max-width: 200px;
    }

    vc-text-input {
        font-size: 20px;
    }
</style>