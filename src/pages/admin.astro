---
import Layout from '../layouts/Layout.astro';
---
<Layout title="Admin">
    <main>    
        <h1>Admin</h1>
        <section>
            <div id="login">
                <label for="pass">Enter password:</label><br/>
                <input type="password" id="pass" name="password" required><br/>
                <button id="submit">submit</button>
                <div id="status"></div>
            </div>
            <div id="dashboard">
                <div id="env-settings-container">
                    <div id="env-container">
                        <fieldset>
                            <legend>Environment Variables</legend>
                            <strong>These need to be set so the application will work.</strong>
                            <section id="env-section"></section>
                        </fieldset>    
                    </div>
                    <div id="settings-container">
                        <fieldset>
                            <legend>Settings</legend>
                            <strong>Site Settings coming soon.</strong>
                            <section id="settings-section"></section>
                        </fieldset>    
                    </div>
                </div>
                <div id="events-list-container">
                    <fieldset>
                        <legend>Past events</legend>
                        <div id="past-events"></div>
                    </fieldset>
                    <fieldset>
                        <legend>Upcoming events</legend>
                        <div id="upcoming-events"></div>
                    </fieldset>
                    <button id="delete-event-button">delete event(s)</button>
                </div>
                <div id="event-form">
                    <fieldset>
                        <legend>Add an event</legend>
                        <label for="title">Title:</label>
                        <br/>        
                        <input id="title" required>
                        <br/>
                        <label for="description">Description:</label>
                        <br/>        
                        <textarea id="description" required></textarea>
                        <br/><br/>
                        <label for="datetime">Date and Time:</label>
                        <br/>  
                        <input type="datetime-local" id="datetime" required>
                        <br/><br/>
                        <button id="add-event-button">add event</button>
                        <br>Status: <span id="event-status"></span>
                    </fieldset>
                </div>
            </div>
        </section>
    </main>
    <template id="env-template">
        <p>You can enter them into your Netlify <a href="" id="netlify-dashboard" target="_blank">dashboard</a></p>
        <div>
            <input type="checkbox" id="env-admin" name="env-admin" disabled>
            <label for="env-admin">ADMIN_PASSWORD</label>    
        </div>
        <div>
            <input type="checkbox" id="env-guest" name="env-guest" disabled>
            <label for="env-guest">GUEST_PASSWORD</label>
        </div>
        <div>
            <input type="checkbox" id="env-host" name="env-host" disabled>
            <label for="env-host">HOST_PASSWORD</label>
        </div>
        <div>
            <input type="checkbox" id="env-tokbox-api" name="env-tokbox-api" disabled>
            <label for="env-tokbox-api">TOKBOX_API_KEY</label>
        </div>
        <div>
            <input type="checkbox" id="env-tokbox-secret" name="env-tokbox-secret" disabled>
            <label for="env-tokbox-secret">TOKBOX_SECRET</label>
        </div>
        <div>
            <input type="checkbox" id="env-vonage-app" name="env-vonage-app" disabled>
            <label for="env-vonage-app">VONAGE_APP_ID</label>
        </div>
        <details>
            <summary>
                <input type="checkbox" id="env-vonage-key" name="env-vonage-key" disabled>
                <label for="env-vonage-key">VONAGE_PRIVATE_KEY64</label>
            </summary>
            <br/><input type="file" id="private-key-input" />
            <br/><textarea id="key-textarea" placeholder="VONAGE_PRIVATE_KEY64 will show up here."></textarea>
            <br/><button id="copy-button">copy to clipboard</button>
        </details>
        <div>
            <input type="checkbox" id="env-github" name="env-github" disabled>
            <label for="env-github">GITHUB_PAT</label>
        </div>
        <div>
            <input type="checkbox" id="env-netlify" name="env-netlify" disabled>
            <label for="env-netlify">NETLIFY_PAT</label>
        </div>
    </template>
</Layout>

<script is:inline>
    const passwordInput = document.querySelector("#pass");
    const submitBtn = document.querySelector("#submit");

    // event form
    const title = document.querySelector("#title");
    const description = document.querySelector("#description");
    const datetimeInput = document.querySelector("#datetime");
    const addEventBtn = document.querySelector("#add-event-button");
    const deleteEventBtn = document.querySelector("#delete-event-button");
    const eventStatus = document.querySelector("#event-status");

    let events = [];
    let settings = {};
    let timeInMs;

    // Get settings file with events

    // Timezone stuff
    function handleDateTimeChange() {
        const timezoneHr = Math.trunc(-(new Date().getTimezoneOffset() / 60));
        const sign = timezoneHr < 0 ? "-" : "+";
        const timezoneMin = new Date().getTimezoneOffset() % 60;
        const timezoneString = `${sign}${
        Math.abs(timezoneHr) < 10 ? "0" + Math.abs(timezoneHr) : Math.abs(timezoneHr)
        }${timezoneMin === 0 ? "00" : Math.abs(timezoneMin)}`;
        const newDate = new Date(`${datetimeInput.value}${timezoneString}`);
        timeInMs = Date.parse(newDate);
        const datetimeSplit = datetimeInput.value.split('T')[0].split('-')
        yearMonth = `${datetimeSplit[0]}-${datetimeSplit[1]}`;
    }

    async function handleAddEvent() {
        if (title.value !== "" && description.value !== "" && timeInMs){
            try {
                eventStatus.textContent = "generating credentials...";
                const credsResponse = await fetch(`/.netlify/functions/generate_creds`);
                const credsJSON = await credsResponse.json();
                eventStatus.textContent = "saving event...";
                const eventToAdd = {
                    title: title.value,
                    description: description.value,
                    timeInMs,
                    apiKey: credsJSON.apiKey,
                    applicationId: credsJSON.applicationId,
                    sessionId: credsJSON.sessionId,
                    conversationId: credsJSON.conversationId
                }
                settings.events = settings.events ? [...settings.events, eventToAdd] : [eventToAdd];
                const saveSettingsJSON = await postData(`/.netlify/functions/save_settings`, settings);
                events = settings.events;
                eventStatus.textContent = "successfully saved!";
                title.value = "";
                description.value = "";
                setTimeout(() => {
                    eventStatus.textContent = "";
                }, 1000)

                loadEvents();

            } catch (error) {
                console.error(error);
                eventStatus.textContent = error.toString();
            }

        }
    }

    async function handleDeleteEvent() {
        const eventsToDelete = document.querySelectorAll("input[name=event]:checked");
        let eventsPending = events;
        if (eventsToDelete.length > 0){
            deleteEventBtn.disabled = true;
            eventStatus.textContent = `deleting event${eventsToDelete.length > 1 ? 's' : ''}`;
            eventsToDelete.forEach((eventToDelete) => {
                const foundIndex = eventsPending.findIndex((event) => event.timeInMs === parseInt(eventToDelete.value));
                eventsPending.splice(foundIndex, 1);
            });
            settings.events = eventsPending;

            try {
                const saveSettingsJSON = await postData(`/.netlify/functions/save_settings`, settings);
                eventStatus.textContent = "successfully deleted!";
                setTimeout(() => {
                    eventStatus.textContent = "";
                }, 1000);
                events = settings.events;
                loadEvents();

            }catch (error) {
                eventStatus.textContent = error.toString();
            }
            deleteEventBtn.disabled = false;

        }
    }

    datetimeInput.addEventListener("change", handleDateTimeChange, false);
    addEventBtn.addEventListener("click", handleAddEvent, false);
    deleteEventBtn.addEventListener("click", handleDeleteEvent, false);



    // Example POST method implementation:
    async function postData(url = "", data = {}) {
        // Default options are marked with *
        const response = await fetch(url, {
            method: "POST", // *GET, POST, PUT, DELETE, etc.
            headers: {
            "Content-Type": "application/json",
            },
            redirect: "follow", // manual, *follow, error
            referrerPolicy: "no-referrer", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
            body: JSON.stringify(data), // body data type must match "Content-Type" header
        });
        return response.json(); // parses JSON response into native JavaScript objects
    }

    function handleFiles(event, callback) {
        const fileList = event.target.files;
        const numFiles = fileList.length;
        const reader = new FileReader();
        reader.onload = (e) => {
            callback(e.target.result.split("data:application/octet-stream;base64,")[1]);
        };
        reader.readAsDataURL(fileList[0]);
    }

    function loadEvents(){
        const pastEvents = document.querySelector("#past-events");
        const upcomingEvents = document.querySelector("#upcoming-events");
        pastEvents.innerHTML = "";
        upcomingEvents.innerHTML = "";
        events.sort((a, b) => a.timeInMs - b.timeInMs);
        events.map(event => {
            if (event.timeInMs > Date.now()){
                upcomingEvents.innerHTML += `
                <input type="checkbox" value=${event.timeInMs} name="event">${event.title}<br/>
                <details>
                    <summary>Description</summary>
                    ${event.description}
                </details>`;
            } else {
                pastEvents.innerHTML += `
                <input type="checkbox" value=${event.timeInMs} name="event">${event.title}<br/>
                <details>
                    <summary>Description</summary>
                    ${event.description}
                </details>`;
            }
        });
    }

    async function loadDashboard(){
        document.querySelector("#dashboard").style.display="flex";
        try {
            // get settings file
            const settingsResponse = await fetch(`/.netlify/functions/get_settings`);
            settings = await settingsResponse.json();
            events = settings.events;
            loadEvents();
            // get env
            const envResponse = await fetch(`/.netlify/functions/check_env`);
            const envSet = await envResponse.json();
            const envSection = document.querySelector("#env-section");
            const envTemplate = document.querySelector('#env-template');
            const envClone = envTemplate.content.cloneNode(true);

            envClone.querySelector("#netlify-dashboard").href = `https://app.netlify.com/sites/${envSet.SITE_NAME}/settings/env`
            envClone.querySelector("#env-admin").checked = envSet.ADMIN_PASSWORDset;
            envClone.querySelector("#env-host").checked = envSet.HOST_PASSWORDset;
            envClone.querySelector("#env-guest").checked = envSet.GUEST_PASSWORDset;
            envClone.querySelector("#env-netlify").checked = envSet.NETLIFY_PATset;
            envClone.querySelector("#env-github").checked = envSet.GITHUB_PATset;
            envClone.querySelector("#env-tokbox-api").checked = envSet.TOKBOX_API_KEYset;
            envClone.querySelector("#env-tokbox-secret").checked = envSet.TOKBOX_SECRETset;
            envClone.querySelector("#env-vonage-app").checked = envSet.VONAGE_APP_IDset;
            envClone.querySelector("#env-vonage-key").checked = envSet.VONAGE_PRIVATE_KEY64set;

            envSection.appendChild(envClone);

            document.querySelector("#private-key-input").addEventListener("change",(event) => {
                handleFiles(event, (key) => {
                    document.querySelector("#key-textarea").textContent = key;
                });
            },false);

            // https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Interact_with_the_clipboard#using_execcommand
            const copyButton = document.querySelector("#copy-button");
            copyButton.addEventListener("click", () => {
                let keyText = document.querySelector("#key-textarea");
                keyText.select();
                document.execCommand("copy");
                copyButton.textContent = "copied to clipboard";
                setTimeout(() => {
                    copyButton.textContent = "copy to clipboard";
                }, 1000)
            });

        } catch(error){
            console.error(error);
        }
    }

    async function submitPassword(){
        if (passwordInput.value !== ""){
            try {
                const dataToSend = {
                    password: passwordInput.value,
                    role: 'admin'
                }
                const loginResponse = await postData(`/.netlify/functions/check_password`, dataToSend);
                if (loginResponse.authorized){
                    document.querySelector("#login").style.display = "none";
                    loadDashboard();
                }
            } catch (error) {
                console.error("error logging in: ",error);
            }
        }
    }

    submitBtn.addEventListener('click', submitPassword, false);
</script>
